{"version":3,"sources":["components/Scroll.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Scroll","children","style","overflow","border","height","Card","id","name","email","className","src","alt","CardList","robots","length","map","robot","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundary","props","state","hasError","error","info","this","setState","Component","App","useState","setRobots","searchField","setSearchField","useEffect","fetch","then","response","json","users","filtered","filter","toLowerCase","includes","e","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAgBeA,EAdA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OACE,qBACEC,MAAO,CACLC,SAAU,SACVC,OAAQ,kBACRC,OAAQ,SAJZ,SAOGJ,KCGQK,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACxB,OACE,sBAAKC,UAAU,sDAAf,UACE,qBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,WACpD,gCACE,6BAAKJ,IACL,4BAAIC,WCYGI,EAhBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,8BACGA,EAAOC,OAAS,GACfD,EAAOE,KAAI,SAACC,GAAD,OACT,cAAC,EAAD,CAEEV,GAAIU,EAAMV,GACVC,KAAMS,EAAMT,KACZC,MAAOQ,EAAMR,OAHRQ,EAAMV,UCARW,EARG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAClB,OACE,qBAAKT,UAAU,MAAf,SACE,uBAAOA,UAAU,gCAAgCU,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,O,4BCkB5FI,E,kDApBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,UAAU,GAHK,E,qDAOnB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG9B,WACE,OAAIG,KAAKJ,MAAMC,SACN,wDAGFG,KAAKL,MAAMvB,a,GAjBM8B,aCuCbC,G,MAjCH,WACV,MAA4BC,mBAAS,IAArC,mBAAOnB,EAAP,KAAeoB,EAAf,KACA,EAAsCD,mBAAS,IAA/C,mBAAOE,EAAP,KAAoBC,EAApB,KAEAC,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAWR,EAAUQ,QAC5B,IAEH,IAIMC,EAAW7B,EAAO8B,QAAO,SAAC3B,GAAD,OAC7BA,EAAMT,KAAKqC,cAAcC,SAASX,EAAYU,kBAGhD,OAAQ/B,EAAOC,OAGb,sBAAKL,UAAU,KAAf,UACE,oBAAIA,UAAU,MAAd,yBACA,cAAC,EAAD,CAAWS,aAbQ,SAAC4B,GACtBX,EAAeW,EAAEC,OAAOC,UAatB,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAUnC,OAAQ6B,WAPxB,8CCfWO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.17004e83.chunk.js","sourcesContent":["import React from 'react';\n\nconst Scroll = ({ children }) => {\n  return (\n    <div\n      style={{\n        overflow: 'scroll',\n        border: '1px solid black',\n        height: '800px',\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React from 'react';\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img src={`https://robohash.org/${id}?200x200`} alt='robots' />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\n\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {robots.length > 0 &&\n        robots.map((robot) => (\n          <Card\n            key={robot.id}\n            id={robot.id}\n            name={robot.name}\n            email={robot.email}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n  return (\n    <div className='pa2'>\n      <input className='pa3 b--green bg-lightest-blue' type='search' placeholder='search robots' onChange={searchChange} />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n      this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>An error has occurred!</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { useState, useEffect } from 'react';\n\nimport Scroll from '../components/Scroll';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\nconst App = () => {\n  const [robots, setRobots] = useState([]);\n  const [searchField, setSearchField] = useState('');\n  \n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((users) => setRobots(users));\n  }, []);\n\n  const onSearchChange = (e) => {\n    setSearchField(e.target.value);\n  };\n\n  const filtered = robots.filter((robot) =>\n    robot.name.toLowerCase().includes(searchField.toLowerCase())\n  );\n\n  return !robots.length ? (\n    <h1>Loading...</h1>\n  ) : (\n    <div className='tc'>\n      <h1 className='f1 '>RoboFriends</h1>\n      <SearchBox searchChange={onSearchChange} />\n      <Scroll>\n        <ErrorBoundary>\n          <CardList robots={filtered} />\n        </ErrorBoundary>\n      </Scroll>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}